TRUNKS
-- Estas son las rutas basicas de la CRUD permitiran CREAR BUSCAR ACTUALIZAR Y ELIMINAR (CAMBIAR ESTADO)
 - POST - http://localhost:8000/api/trunk
	{
		"nombre_troncal"  : "Caracas",		
		"letra_troncal"	:"A",
		"color_troncal"	:"#082863",
		"activo_troncal": "a"
	}
 - GET - http://localhost:8000/api/trunk - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/trunk/2 - El 2 hace referencia al id de la TRONCAL que se desea buscar
 - PUT - http://localhost:8000/api/trunk/2 - El 2 hace referencia al id de la TRONCAL que se desea editar
	{
		"nombre_troncal"  : "Americas",		
		"letra_troncal"	:"F",
		"color_troncal"	:"#F40F0F",
		"activo_troncal": "n"
	}
 - DELETE - http://localhost:8000/api/trunk/12 - El 12 hace referencia al id de la TRONCAL a la cual se le cambiara de estado
 
-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/trunk/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/trunk/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/trunk/get/11 - El 11 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar
	
-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/trunk/factory/fill 
 
-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/trunk
...................................................................................................................................................................................... 
STATIONS
- POST - http://localhost:8000/api/station
	{
		"nombre_estacion": "SENA",
		"activo_estacion": "a"
	}
 - GET - http://localhost:8000/api/station - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/station/2 - El 2 hace referencia al id de la ESTACION que se desea buscar
 - PUT - http://localhost:8000/api/station/2 - El 2 hace referencia al id de la ESTACION que se desea editar
	{
		"nombre_estacion": "Banderas",
		"activo_estacion": "n"
	}

 - DELETE - http://localhost:8000/api/station/12 - El 12 hace referencia al id de la ESTACION a la cual se le cambiara de estado

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/station/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/station/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/station/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/station/factory/fill 

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/station
...........................................................................................................................................................
TRUNKSSTATIONS
- POST - http://localhost:8000/api/trunkStation
	{
		"id_estacion": 6,
		"id_troncal": 2,
		"activo_troncal_estacion": "a"
	}
 - GET - http://localhost:8000/api/trunkStation - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/trunkStation/2 - El 2 hace referencia al id de la TRONCAL_ESTACION que se desea buscar
 - PUT - http://localhost:8000/api/trunkStation/2 - El 2 hace referencia al id de la TRONCAL_ESTACION que se desea editar
	{
		"id_estacion": 6,
		"id_troncal": 2,
		"activo_troncal_estacion": "a"
	}
 - DELETE - http://localhost:8000/api/trunkStation/2 - El 2 hace referencia al id de la TRONCAL_ESTACION a la cual se le cambiara de estado	
 
-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/trunkStation/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/trunkStation/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/trunkStation/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/trunkStation/factory/fill 

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/trunkStation
 
.......................................................................................................................................................	
PORTALS
- POST - http://localhost:8000/api/portal
	{
		"id_troncal": 11,
		"nombre_portal": "PORTAL USME",
		"activo_portal": "n"
	}
 - GET - http://localhost:8000/api/portal - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/portal/2 - El 2 hace referencia al id del PORTAL que se desea buscar
 - PUT - http://localhost:8000/api/portal/2 - El 2 hace referencia al id del PORTAL que se desea editar
	{
		"id_troncal": 6,
		"nombre_portal": "PORTAL DE LA 80",
		"activo_portal": "a"
	}
 - DELETE - http://localhost:8000/api/portal/2 - El 2 hace referencia al id del PORTAL aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/portal/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/portal/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/portal/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/portal/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/portal

........................................................................................................................................................................
PLATFORMS
- POST - http://localhost:8000/api/platform
	{
		"id_portal": 56,
		"numero_plataforma": 3,
		"activo_plataforma": "a"
	}
 - GET - http://localhost:8000/api/platform - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/platform/2 - El 2 hace referencia al id de la PLATAFORMA que se desea buscar
 - PUT - http://localhost:8000/api/platform/2 - El 2 hace referencia al id de la PLATAFORMA que se desea editar
	{
		"id_portal": 2,
		"numero_plataforma": 4,
		"activo_plataforma": "n"
	}

 - DELETE - http://localhost:8000/api/platform/2 - El 2 hace referencia al id de la PLATAFORMA aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/platform/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/platform/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/platform/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/platform/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/platform
........................................................................................................................................................................
WAGONS
- POST - http://localhost:8000/api/wagon
	{
		"id_troncal_estacion": "17",
		"numero_vagon": "2",
		"activo_vagon": "a"
	}
	O TAMBIEN PODRIA SER
	{
		"id_plataforma": "3",
		"numero_vagon": "1",
		"activo_vagon": "a"
	}
 - GET - http://localhost:8000/api/wagon - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/wagon/2 - El 2 hace referencia al id del VAGON que se desea buscar
 - PUT - http://localhost:8000/api/wagon/2 - El 2 hace referencia al id del VAGON que se desea editar
	{
		"id_troncal_estacion": "1",
		"numero_vagon": "1",
		"activo_vagon": "a"
	}
	O TAMBIEN PODRIA SER
	{
		"id_plataforma": "2",
		"numero_vagon": "6",
		"activo_vagon": "n"
	}

 - DELETE - http://localhost:8000/api/wagon/2 - El 2 hace referencia al id del VAGON aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/wagon/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/wagon/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/wagon/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/wagon/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/wagon
.......................................................................................................................................................
ROUTES
- POST - http://localhost:8000/api/route
	{
		"codigo_ruta": "BF36",
		"activo_ruta": "a"
	}
 - GET - http://localhost:8000/api/route - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/route/2 - El 2 hace referencia al id de la RUTA que se desea buscar
 - PUT - http://localhost:8000/api/route/2 - El 2 hace referencia al id de la RUTA que se desea editar
	{
		"codigo_ruta": "AC86",
		"activo_ruta": "n"
	}
 - DELETE - http://localhost:8000/api/route/2 - El 2 hace referencia al id de la RUTA aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/route/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/route/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/route/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/route/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/route
................................................................................................................................................................
STOPS
- POST - http://localhost:8000/api/route/1/wagon -> acaa se le esta diciendo que la RUTA 1 tendra los vagones asociados del JSON
	{
	"wagons": [
		{
		"id_vagon": 22,
		"estado_parada": "a"
		},
		{
		"id_vagon": 16,
		"estado_parada": "a"
		}
	]
}	
 - GET - http://localhost:8000/api/route/2/wagon - HEADER-> active:a || active: n - si va sin active los lista todos,  se le dice que traiga todos los vagones de la ruta 2
 - PUT - http://localhost:8000/api/route/1/wagon - El 1 hace referencia al id de la RUTA que se desea editar
	{
	"wagons": [
		{
		"id_vagon": 9,
		"estado_parada": "a"
		},
		{
		"id_vagon": 10,
		"estado_parada": "a"
		}
	]
}	
 - DELETE - http://localhost:8000/api/route/38/wagon/100 - El 38 hace referencia al id de la RUTA y el 100 hace referencia al id del VAGON, entre los dos forman la parada	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/stop/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/stop/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/stop/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/stop/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/stop
.......................................................................................................................................................................
TYPE_BUS
- POST - http://localhost:8000/api/bustype
	{
		"nombre_tipo" 	: "articulado",
		"color"			: "#fffffe",
		"activo_tipo_bus" : "a"
	}
 - GET - http://localhost:8000/api/bustype - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/bustype/2 - El 2 hace referencia al id del TIPO BUS que se desea buscar
 - PUT - http://localhost:8000/api/bustype/2 - El 2 hace referencia al id del TIPO BUS que se desea editar
	{
		"nombre_tipo" 	: "bi-articulado",
		"color"			: "#fffffe",
		"activo_tipo_bus" : "a"
	}
 - DELETE - http://localhost:8000/api/bustype/2 - El 2 hace referencia al id del TIPO BUS aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/bustype/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/bustype/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/bustype/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/bustype/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/bustype
........................................................................................................................................................................ 
BUS
- POST - http://localhost:8000/api/bus
	{
		"id_tipo_bus": "11",
		"placabus": "YGJ-495",
		"activo_bus": "a"
	}
 - GET - http://localhost:8000/api/bus - HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/bus/2 - El 2 hace referencia al id del  BUS que se desea buscar
 - PUT - http://localhost:8000/api/bus/2 - El 2 hace referencia al id del  BUS que se desea editar
	{
		"id_tipo_bus": "11",
		"placabus": "RJJ-495",
		"activo_bus": "a"
	}
- DELETE - http://localhost:8000/api/bus/2 - El 2 hace referencia al id del BUS aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/bus/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/bus/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/bus/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/bus/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/bus
....................................................................................................................................................................... 
HORARIO
- POST - http://localhost:8000/api/schedule
	{
	  "horario_inicio": "2020-05-09 12:51:37",
	  "horario_fin": "2020-05-09 16:19:28",
	  "dia": "Thursday",
	  "activo_horario": "n"
	}
 - GET - http://localhost:8000/api/schedule HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/schedule/2 - El 2 hace referencia al id del HORARIO que se desea buscar
 - PUT - http://localhost:8000/api/schedule/2 - El 2 hace referencia al id del HORARIO que se desea editar
	{
		"horario_inicio": "2020-05-09 5:00:53",
		"horario_fin": "2020-05-09 08:10:44",
		"dia": "viernes",
		"activo_horario": "a"
	}
- DELETE - http://localhost:8000/api/schedule/2 - El 2 hace referencia al id del HORARIO aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/schedule/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/schedule/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/schedule/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/schedule/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/schedule
........................................................................................................................................................................
ASIGNACION TRONCAL - RUTA - BUS
- POST - http://localhost:8000/api/assignment
	{
	  "id_ruta":48,
	  "id_bus":12,			
	  "id_horario":7,
	  "fecha_inicio_operacion":"2018/03/03",
	  "activo_asignacion":"a"
	}
 - GET - http://localhost:8000/api/assignment HEADER-> active:a || active: n - si va sin active los lista todos
 - GET - http://localhost:8000/api/assignment/2 - El 2 hace referencia al id de la ASIGNACION que se desea buscar
 - PUT - http://localhost:8000/api/assignment/2 - El 2 hace referencia al id de la ASIGNACION que se desea editar
	{
		"id_ruta":4,
		"id_bus":2,			
		"id_horario":7,
		"fecha_inicio_operacion":"2018/03/03",
		"fecha_fin_operacion":"2014/03/22",
		"activo_asignacion":"a"
	}
- DELETE - http://localhost:8000/api/assignment/2 - El 2 hace referencia al id de la ASIGNACION aL cual se le cambiara de estado	

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/assignment/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/assignment/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/assignment/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/assignment/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/assignment
....................................................................................................................................................................
TRAVELS
- POST - http://localhost:8000/api/travel
	{
		"id_asignacion_ruta": "27",
		"fecha_inicio_viaje": "2004-12-13 06:04:59",
		"fecha_fin_viaje": "2004-12-04 06:04:59"
	}
 - GET - http://localhost:8000/api/travel
 - GET - http://localhost:8000/api/travel/2 - El 2 hace referencia al id del VIAJE que se desea buscar
 - PUT - http://localhost:8000/api/travel/2 - El 2 hace referencia al id del VIAJE que se desea editar
	{
		"id_asignacion_ruta": "27",
		"fecha_inicio_viaje": "2004-12-13 06:04:59",
		"fecha_fin_viaje": "2004-12-04 06:04:59"
	}
- DELETE - http://localhost:8000/api/travel/2 - En este caso si se elimina el viaje con el id 2

-- Esta ruta permite generar aleatoriamente x cantidad de elementos aleatorios nuevos,
-- solo se crean no se almacenan en la base de datos ni en un archivo
 - GET - http://localhost:8000/api/travel/factory/10 - El 10 es la cantidad de elementos aleatorios que va a generar

-- Esta ruta permite generar y guardar x cantidad de elementos en la base de datos
 - GET - http://localhost:8000/api/travel/factory/save/7 - El 7 es la cantidad de elementos que guardara en la base de datos
 
-- Esta ruta permite guardar un archivo de tipo JSON con la cantidad que le entre por parametro
 - GET - http://localhost:8000/api/travel/factory/get/10 - El 10 es la cantidad de elementos aleatorios que contiene el archivo Json que se va a descargar

-- Esta ruta permite tomar un archivo de tipo JSON y guarda su contenido en la base de datos, si un elemento tiene error 
-- no lo guarda y aparte muestra la razon por la cual el mismo no fue guardado
 - POST - http://localhost:8000/api/travel/factory/fill

-- Esta ruta permite guardar todos los elementos de la entidad troncal de la base de datos en un archivo JSON
 - GET - http://localhost:8000/api/download/travel
	